---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, authors } = Astro.props;

// Get author information if authors are specified
let authorData: CollectionEntry<'authors'>[] = [];
if (authors && authors.length > 0) {
	const allAuthors = await getCollection('authors');
	authorData = allAuthors.filter(author => authors.includes(author.id));
}
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			.authors {
				margin: 1em 0;
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				gap: 1rem;
			}
			.author {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				padding: 0.5rem;
				border-radius: 8px;
				background: rgba(var(--accent-light), 0.1);
				text-decoration: none;
				color: inherit;
				transition: background-color 0.2s ease;
			}
			.author:hover {
				background: rgba(var(--accent-light), 0.2);
			}
			.author-avatar {
				width: 32px;
				height: 32px;
				border-radius: 50%;
				object-fit: cover;
			}
			.author-name {
				font-weight: 500;
				color: rgb(var(--black));
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage.startsWith('/') ? `${import.meta.env.BASE_URL}/${heroImage.slice(1)}` : heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						{authorData.length > 0 && (
							<div class="authors">
								{authorData.map((author) => (
									<a href={`${import.meta.env.BASE_URL}/authors/${author.id}/`} class="author">
										{author.data.avatar && (
											<img
												src={author.data.avatar.startsWith('/') ? `${import.meta.env.BASE_URL}/${author.data.avatar.slice(1)}` : author.data.avatar}
												alt={author.data.name}
												class="author-avatar"
											/>
										)}
										<span class="author-name">{author.data.name}</span>
									</a>
								))}
							</div>
						)}
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
